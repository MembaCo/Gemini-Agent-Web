# ==============================================================================
# File: backend/core/scanner.py
# @author: Memba Co.
# ==============================================================================
import logging
import time
import asyncio  # YENÄ°: EÅŸzamanlÄ± iÅŸlemler iÃ§in asyncio kÃ¼tÃ¼phanesi eklendi
import database
from core import app_config
from tools import get_top_gainers_losers, get_volume_spikes, _get_unified_symbol, get_technical_indicators
from core import agent as core_agent
from core.trader import open_new_trade, TradeException
from notifications import send_telegram_message
from google.api_core import exceptions as google_exceptions
from core import cache_manager

BLACKLISTED_SYMBOLS = {}


# YENÄ°: Tek bir sembolÃ¼ asenkron olarak analiz eden yardÄ±mcÄ± fonksiyon
async def _get_and_filter_candidate(symbol: str, entry_tf: str, source: str):
    """
    Tek bir sembol iÃ§in verileri Ã§eker, Ã¶n filtreden geÃ§irir ve
    uygunsa aday verisini dÃ¶ndÃ¼rÃ¼r.
    """
    try:
        # Bu fonksiyon paralel Ã§alÄ±ÅŸtÄ±ÄŸÄ± iÃ§in cache'i burada doÄŸrudan kullanmÄ±yoruz,
        # Ã§Ã¼nkÃ¼ her interaktif taramada en taze veriyi almak istiyoruz.
        # `get_technical_indicators` iÃ§indeki kendi cache mekanizmasÄ± hala geÃ§erlidir.
        indicators_result = get_technical_indicators.invoke({"symbol_and_timeframe": f"{symbol},{entry_tf}"})

        if indicators_result.get("status") != "success":
            return None

        indicators_data = indicators_result["data"]
        adx = indicators_data.get('adx', 0)
        rsi = indicators_data.get('rsi', 50)

        # Stratejiye gÃ¶re filtreleme koÅŸullarÄ±
        is_trending = adx > 20
        is_rsi_potential = (rsi > 65 or rsi < 35)

        if is_trending and is_rsi_potential:
            return {
                "symbol": symbol,
                "source": source, # Kaynak bilgisi artÄ±k korunuyor
                "indicators": {
                    "RSI": round(rsi, 2),
                    "ADX": round(adx, 2),
                },
                "timeframe": entry_tf
            }
        return None
    except Exception:
        # Tek bir semboldeki hata ana dÃ¶ngÃ¼yÃ¼ kÄ±rmamalÄ±
        return None


# === GÃœNCELLENDÄ°: Fonksiyon artÄ±k asenkron ve tamamen optimize edilmiÅŸ ===
async def get_scan_candidates():
    """
    TÃ¼m kaynaklardan potansiyel iÅŸlem adaylarÄ±nÄ± toplar, Ã¶n filtreden geÃ§irir
    ve analiz iÃ§in hazÄ±r bir liste olarak DÃ–NER. API istekleri paralelleÅŸtirilmiÅŸtir.
    """
    app_config.load_config()
    logging.info("--- ðŸ”Ž OPTÄ°MÄ°ZE Aday Tarama DÃ¶ngÃ¼sÃ¼ BaÅŸlatÄ±lÄ±yor ðŸ”Ž ---")

    # 1. AdÄ±m: Aday kaynaklarÄ±nÄ± topla (Bu bÃ¶lÃ¼m senkron ve hÄ±zlÄ±dÄ±r)
    open_symbols = {p['symbol'] for p in database.get_all_positions()}
    static_blacklist = {_get_unified_symbol(s) for s in app_config.settings.get('PROACTIVE_SCAN_BLACKLIST', [])}
    
    # Hangi sembolÃ¼n hangi kaynaktan geldiÄŸini takip etmek iÃ§in bir sÃ¶zlÃ¼k
    potential_candidates = {}

    # Kaynak 1: Beyaz Liste
    for s in [_get_unified_symbol(s) for s in app_config.settings.get('PROACTIVE_SCAN_WHITELIST', [])]:
        potential_candidates[s] = 'Whitelist'

    # Kaynak 2: En Ã‡ok YÃ¼kselenler/DÃ¼ÅŸenler
    if app_config.settings.get('PROACTIVE_SCAN_USE_GAINERS_LOSERS'):
        try:
            for item in get_top_gainers_losers(top_n=app_config.settings.get('PROACTIVE_SCAN_TOP_N', 10), min_volume_usdt=app_config.settings.get('PROACTIVE_SCAN_MIN_VOLUME_USDT', 1000000)):
                if item['symbol'] not in potential_candidates:
                    potential_candidates[item['symbol']] = 'Gainer/Loser'
        except Exception as e:
            logging.error(f"YÃ¼kselen/DÃ¼ÅŸenler listesi alÄ±namadÄ±: {e}")

    # Kaynak 3: Hacim PatlamasÄ±
    if app_config.settings.get('PROACTIVE_SCAN_USE_VOLUME_SPIKE'):
        try:
            for item in get_volume_spikes(timeframe=app_config.settings.get('PROACTIVE_SCAN_VOLUME_TIMEFRAME', '1h'), period=app_config.settings.get('PROACTIVE_SCAN_VOLUME_PERIOD', 24), multiplier=app_config.settings.get('PROACTIVE_SCAN_VOLUME_MULTIPLIER', 5.0), min_volume_usdt=app_config.settings.get('PROACTIVE_SCAN_MIN_VOLUME_USDT', 1000000)):
                if item['symbol'] not in potential_candidates:
                    potential_candidates[item['symbol']] = f"Hacim PatlamasÄ± ({item['spike_ratio']:.1f}x)"
        except Exception as e:
            logging.error(f"Hacim patlamasÄ± listesi alÄ±namadÄ±: {e}", exc_info=True)
    
    # FiltrelenmiÅŸ son tarama listesini oluÅŸtur
    final_scan_list = {s: src for s, src in potential_candidates.items() if s not in open_symbols and s not in static_blacklist}
    logging.info(f"Toplam {len(final_scan_list)} benzersiz aday bulundu. Paralel Ã¶n filtre uygulanÄ±yor...")

    # 2. AdÄ±m: TÃ¼m adaylarÄ± paralel olarak filtrele
    entry_tf = app_config.settings.get('PROACTIVE_SCAN_ENTRY_TIMEFRAME', '15m')
    
    # Her bir sembol iÃ§in asenkron gÃ¶revler oluÅŸtur
    tasks = [_get_and_filter_candidate(symbol, entry_tf, source) for symbol, source in final_scan_list.items()]
    
    # TÃ¼m gÃ¶revleri eÅŸzamanlÄ± olarak Ã§alÄ±ÅŸtÄ±r ve sonuÃ§larÄ± bekle
    results = await asyncio.gather(*tasks)
    
    # `None` olmayan (yani filtreden geÃ§en) sonuÃ§larÄ± topla
    ready_candidates = [res for res in results if res is not None]

    logging.info(f"--- âœ… OPTÄ°MÄ°ZE Aday Tarama TamamlandÄ±: {len(ready_candidates)} aday analize hazÄ±r. ---")
    return ready_candidates


def execute_single_scan_cycle():
    """Bu fonksiyon artÄ±k kullanÄ±lmÄ±yor, ancak uyumluluk iÃ§in bÄ±rakÄ±ldÄ±."""
    logging.warning("execute_single_scan_cycle fonksiyonu artÄ±k kullanÄ±mdan kaldÄ±rÄ±lmÄ±ÅŸtÄ±r. LÃ¼tfen yeni interaktif tarayÄ±cÄ±yÄ± kullanÄ±n.")
    return {"summary": {}, "details": [{"type":"warning", "symbol":"SYSTEM", "message": "Bu tarama yÃ¶ntemi kullanÄ±mdan kaldÄ±rÄ±ldÄ±."}]}